{"version":3,"sources":["logo.svg","components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","addtoval","setState","state","doequal","math","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,gMCa5BC,G,kBANF,SAACC,GAAD,OACT,yBAAKC,UAAS,0BALAC,EAK+BF,EAAMG,SAJ3CC,MAAMF,IAAY,MAANA,GAAiB,MAANA,EAImC,WAAL,OAAmBG,QAAS,kBAAIL,EAAMM,YAAYN,EAAMG,YAChHH,EAAMG,UANE,IAACD,ICOHK,G,MAPH,SAACP,GAAD,OAER,yBAAKC,UAAU,SACVD,EAAMQ,SCKAC,G,MANG,SAAAT,GAAK,OACnB,yBAAKC,UAAU,eAAeI,QAASL,EAAMU,aACxCV,EAAMG,Y,QC0DAQ,E,YAxDb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAORY,SAAW,SAACV,GACV,EAAKW,SAAS,CAAEL,MAAO,EAAKM,MAAMN,MAAQN,KATzB,EAYnBa,QAAU,WACR,EAAKF,SAAS,CAAEL,MAAOQ,IAAc,EAAKF,MAAMN,UAVhD,EAAKM,MAAQ,CACXN,MAAO,KAJQ,E,sEAeT,IAAD,OACP,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAOO,MAAOS,KAAKH,MAAMN,QACzB,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,MAGF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,MAGF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,MAGF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKL,UAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaW,KAAKF,SAA1B,KACA,kBAAC,EAAD,CAAQT,YAAaW,KAAKL,UAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAaS,YAAa,kBAAM,EAAKG,SAAS,CAAEL,MAAO,QAAvD,gB,GAjDMU,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.86ae5784.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Button.css'\r\n\r\nconst isOperator=(val)=>{\r\n    return !isNaN(val)||val==='='||val==='.'\r\n}\r\n\r\nconst Button=(props)=>(\r\n    <div className={`button-wrapper ${isOperator(props.children)?null:'operator'}`} onClick={()=>props.handleClick(props.children)}>\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport './Input.css'\r\n\r\nconst Input=(props)=>\r\n(\r\n    <div className=\"input\">\r\n        {props.input}\r\n    </div>\r\n)\r\n\r\nexport default Input","import React  from 'react';\r\nimport './ClearButton.css'\r\n\r\n\r\n\r\nconst ClearButton=props=>(\r\n    <div className=\"clear-button\" onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default ClearButton","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from './components/Button'\nimport Input from './components/Input'\nimport ClearButton from './components/ClearButton'\nimport * as math from 'mathjs'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      input: \" \"\n    }\n  }\n\n  addtoval = (val) => {\n    this.setState({ input: this.state.input + val })\n  }\n\n  doequal = () => {\n    this.setState({ input: math.evaluate(this.state.input) })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input}></Input>\n          <div className=\"row\">\n            <Button handleClick={this.addtoval}>1</Button>\n            <Button handleClick={this.addtoval}>2</Button>\n            <Button handleClick={this.addtoval}>3</Button>\n            <Button handleClick={this.addtoval}>+</Button>\n\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addtoval}>4</Button>\n            <Button handleClick={this.addtoval}>5</Button>\n            <Button handleClick={this.addtoval}>6</Button>\n            <Button handleClick={this.addtoval}>-</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addtoval}>7</Button>\n            <Button handleClick={this.addtoval}>8</Button>\n            <Button handleClick={this.addtoval}>9</Button>\n            <Button handleClick={this.addtoval}>*</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addtoval}>.</Button>\n            <Button handleClick={this.addtoval}>0</Button>\n            <Button handleClick={this.doequal}>=</Button>\n            <Button handleClick={this.addtoval}>/</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({ input: \" \" })}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}